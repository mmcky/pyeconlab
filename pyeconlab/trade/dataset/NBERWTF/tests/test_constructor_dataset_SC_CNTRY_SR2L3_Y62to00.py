"""
Test Dataset: SC_CNTRY_SR2L3_Y62to00 from NBERWTFConstructor
	
	dropAX 			: 	Drop AX Codes 
	sitcr2 			: 	Add SITCR2 Indicator
	drop_nonsitcr2 	: 	Drop non-standard SITC2 Codes
	report 			: 	Print Report
	source_institution : which institutions SITC classification to use

Datasets
--------
A => dropAX=False, sitcr2=False, drop_nonsitcr2=False
B => dropAX=True, sitcr2=True, drop_nonsitcr2=True

Stata Test Data
---------------
[1] Generated by ..\do\basic_sitc3_country_data.do

Future Work 
-----------
[1] Change TEST_DATA_DIR to a non hard linked reference. How do package this data?
[2] Consider using to_export, and to_import attributes rather than recomputing everything
"""

import os
import pandas as pd
from numpy.testing import assert_allclose

from pyeconlab import NBERWTFConstructor

#-Win7-#
# TEST_DATA_DIR 	= "D:\\work-data\\repos-pyeconlab-testdata\\"  						#win7
# SOURCE_DATA_DIR = "D:\\work-data\\x_datasets\\36a376e5a01385782112519bddfac85e\\" 	#win7

#-Linux/OSX-#
TEST_DATA_DIR = os.path.expanduser("~/work-data/repos-pyeconlab-testdata/SC_CNTRY_SR2L3_Y62to00/")
SOURCE_DATA_DIR = os.path.expanduser("~/work-data/datasets/36a376e5a01385782112519bddfac85e/")

MANUAL = False

class TestSC_CNTRY_SR2L3_Y62to00():
	"""
	Test Suite for SC_CNTRY_SR2L3_Y62to00 Datasets A and B
	
	Settings
	--------
	[_A] dropAX=False, 	sitcr2=False, 	drop_nonsitcr2=False, 	intertemp_cntrycode=False, 	drop_incp_cntrycode=False
	[_B] dropAX=True, 	sitcr2=True, 	drop_nonsitcr2=True, 	intertemp_cntrycode=False, 	drop_incp_cntrycode=False
	[_C] dropAX=True, 	sitcr2=True, 	drop_nonsitcr2=True, 	intertemp_cntrycode=True, 	drop_incp_cntrycode=False	
	[_D] dropAX=True, 	sitcr2=True, 	drop_nonsitcr2=True, 	intertemp_cntrycode=True, 	drop_incp_cntrycode=True	

	Stata Produced Files
	--------------------
	#-A-#
	A-nberfeenstra_do_stata_sitc3_country_data.log 					
	A-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta 	[OK]
	A-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta 		[OK]
	A-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta 		[OK]

	#-B-#
	B-nberfeenstra_do_stata_sitc3_country_data.log
	B-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta 	[OK]
	B-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta 		[OK]
	B-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta 		[OK]

	#-C-#
	C-nberfeenstra_do_stata_sitc3_country_data.log 					
	C-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta 	[OK]
	C-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta 		[OK]
	C-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta 		[OK]

	#-D-#
	D-nberfeenstra_do_stata_sitc3_country_data.log 					
	D-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta 	[OK]
	D-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta 		[OK]
	D-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta 		[OK]
	"""
	
	@classmethod
	def setUpClass(cls):
		cls.obj = NBERWTFConstructor(source_dir=SOURCE_DATA_DIR)

	def setUp(self):
		self.obj.reset_dataset()

	#-Dataset A-#

	def test_bilateral_data_A(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_A(data_type='trade')
		#-stata-#
		self.A = pd.read_stata(TEST_DATA_DIR + 'A-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta')
		self.A.sort(['year', 'eiso3c', 'iiso3c', 'sitc3'], inplace=True)
		self.A.reset_index(inplace=True)
		del self.A['index']
		assert_allclose(self.obj.dataset['value'].values, self.A['value'].values)
		del self.A

	def test_export_data_A(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_A(data_type='export') 											#a to_export would be more efficient here
		#-stata-#
		self.A = pd.read_stata(TEST_DATA_DIR + 'A-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta')
		self.A.sort(['year', 'eiso3c', 'sitc3'], inplace=True)
		self.A.reset_index(inplace=True)
		del self.A['index']
		assert_allclose(self.obj.dataset['value'].values, self.A['value'].values)
		del self.A

	def test_import_data_A(self): 																					#a to_import would be more efficient here
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_A(data_type='import')
		#-stata-#
		self.A = pd.read_stata(TEST_DATA_DIR + 'A-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta')
		self.A.sort(['year', 'iiso3c', 'sitc3'], inplace=True)
		self.A.reset_index(inplace=True)
		del self.A['index']
		assert_allclose(self.obj.dataset['value'].values, self.A['value'].values)
		del self.A

	#-Dataset B-#

	def test_bilateral_data_B(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_B(data_type='trade')
		#-stata-#
		self.B = pd.read_stata(TEST_DATA_DIR + 'B-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta')
		self.B.sort(['year', 'eiso3c', 'iiso3c', 'sitc3'], inplace=True)
		self.B.reset_index(inplace=True)
		del self.B['index']
		assert_allclose(self.obj.dataset['value'].values, self.B['value'].values)
		del self.B

	def test_export_data_B(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_B(data_type='export') 											#a to_export would be more efficient here
		#-stata-#
		self.B = pd.read_stata(TEST_DATA_DIR + 'B-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta')
		self.B.sort(['year', 'eiso3c', 'sitc3'], inplace=True)
		self.B.reset_index(inplace=True)
		del self.B['index']
		assert_allclose(self.obj.dataset['value'].values, self.B['value'].values)
		del self.B

	def test_import_data_B(self): 																					#a to_import would be more efficient here
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_B(data_type='import')
		#-stata-#
		self.B = pd.read_stata(TEST_DATA_DIR + 'B-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta')
		self.B.sort(['year', 'iiso3c', 'sitc3'], inplace=True)
		self.B.reset_index(inplace=True)
		del self.B['index']
		assert_allclose(self.obj.dataset['value'].values, self.B['value'].values) 
		del self.B

	#-Dataset C-#

	def test_bilateral_data_C(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_C(data_type='trade')
		#-stata-#
		self.C = pd.read_stata(TEST_DATA_DIR + 'C-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta')
		self.C = self.C.sort(['year', 'eiso3c', 'iiso3c', 'sitc3'])
		self.C = self.C.reset_index()
		del self.C['index']
		assert_allclose(self.obj.dataset['value'].values, self.C['value'].values)
		del self.C

	def test_export_data_C(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_C(data_type='export') 											#a to_export would be more efficient here
		#-stata-#
		self.C = pd.read_stata(TEST_DATA_DIR + 'C-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta')
		self.C.sort(['year', 'eiso3c', 'sitc3'], inplace=True)
		self.C.reset_index(inplace=True)
		del self.C['index']
		assert_allclose(self.obj.dataset['value'].values, self.C['value'].values)
		del self.C

	def test_import_data_C(self): 																					#a to_import would be more efficient here
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_C(data_type='import')
		#-stata-#
		self.C = pd.read_stata(TEST_DATA_DIR + 'C-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta')
		self.C.sort(['year', 'iiso3c', 'sitc3'], inplace=True)
		self.C.reset_index(inplace=True)
		del self.C['index']
		assert_allclose(self.obj.dataset['value'].values, self.C['value'].values) 
		del self.C

	#-Dataset D-#

	def test_bilateral_data_D(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_D(data_type='trade')
		#-stata-#
		self.D = pd.read_stata(TEST_DATA_DIR + 'D-nberfeenstrawtf_do_stata_basic_country_sitc3_bilateral.dta')
		self.D = self.D.sort(['year', 'eiso3c', 'iiso3c', 'sitc3'])
		self.D = self.D.reset_index()
		del self.D['index']
		assert_allclose(self.obj.dataset['value'].values, self.D['value'].values)
		del self.D

	def test_export_data_D(self):
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_D(data_type='export') 											#a to_export would be more efficient here
		#-stata-#
		self.D = pd.read_stata(TEST_DATA_DIR + 'D-nberfeenstrawtf_do_stata_basic_country_sitc3_exports.dta')
		self.D.sort(['year', 'eiso3c', 'sitc3'], inplace=True)
		self.D.reset_index(inplace=True)
		del self.D['index']
		assert_allclose(self.obj.dataset['value'].values, self.D['value'].values)
		del self.D

	def test_import_data_D(self): 																					#a to_import would be more efficient here
		#-pyeconlab-#
		self.obj.construct_dataset_SC_CNTRY_SR2L3_Y62to00_D(data_type='import')
		#-stata-#
		self.D = pd.read_stata(TEST_DATA_DIR + 'D-nberfeenstrawtf_do_stata_basic_country_sitc3_imports.dta')
		self.D.sort(['year', 'iiso3c', 'sitc3'], inplace=True)
		self.D.reset_index(inplace=True)
		del self.D['index']
		assert_allclose(self.obj.dataset['value'].values, self.D['value'].values) 
		del self.D

### ------------------------------- ###
### --- MANUAL TESTS AND CHECKS --- ###
### ------------------------------- ###

if MANUAL:

	### --- Test: Old (SC_CNTRY_SR2L3 Routines to construct_sitc_dataset() method) --- ###

	from pyeconlab import NBERWTFConstructor
	from pandas.util.testing import assert_frame_equal
	from pyeconlab.util import compare_dataframe_rows
	SOURCE = "/home/matthewmckay/work-data/datasets/36a376e5a01385782112519bddfac85e/"

	#-A-#
	nber = NBERWTFConstructor(source_dir=SOURCE)
	a = nber.construct_dataset_SC_CNTRY_SR2L3_Y62to00_A(data_type="export")
	nber.reset_dataset()
	b = nber.construct_sitc_dataset(data_type="export", dataset="A", product_level=3, sitc_revision=2, dataset_object=True)
	try:
	    assert_frame_equal(a.data, b.data)
	except:
	    s,d = compare_dataframe_rows(a.data, b.data.reindex_like(a.data))
	    d.to_excel("diff_A.xlsx")
	    s,d = compare_dataframe_rows(b.data, a.data.reindex_like(a.data))
	    d.to_excel("diff_A_alt.xlsx")

	### --- Note the Following will differ on CHN and HKG Exports due to construct_sitc_dataset() makes use of the HK-CHINA adjustment data --- ####

	#-B-#
	nber = NBERWTFConstructor(source_dir=SOURCE)
	a = nber.construct_dataset_SC_CNTRY_SR2L3_Y62to00_B(data_type="export") 	#-Note B ~= C
	nber.reset_dataset()
	b = nber.construct_sitc_dataset(data_type="export", dataset="C", product_level=3, sitc_revision=2, dataset_object=True)
	try:
	    assert_frame_equal(a.data, b.data)
	except:
	    s,d = compare_dataframe_rows(a.data, b.data.reindex_like(a.data))
	    d.to_excel("diff_A.xlsx")
	    s,d = compare_dataframe_rows(b.data, a.data.reindex_like(a.data))
	    d.to_excel("diff_A_alt.xlsx")

	#-C-#
	nber = NBERWTFConstructor(source_dir=SOURCE)
	a = nber.construct_dataset_SC_CNTRY_SR2L3_Y62to00_C(data_type="export") 	#note C ~= D
	nber.reset_dataset()
	b = nber.construct_sitc_dataset(data_type="export", dataset="D", product_level=3, sitc_revision=2, dataset_object=True)
	try:
	    assert_frame_equal(a.data, b.data)
	except:
	    s,d = compare_dataframe_rows(a.data, b.data.reindex_like(a.data))
	    d.to_excel("diff_C.xlsx")
	    s,d = compare_dataframe_rows(b.data, a.data.reindex_like(b.data))
	    d.to_excel("diff_C_alt.xlsx")

	#-D-#
	nber = NBERWTFConstructor(source_dir=SOURCE)
	a = nber.construct_dataset_SC_CNTRY_SR2L3_Y62to00_D(data_type="export")
	nber.reset_dataset()
	b = nber.construct_sitc_dataset(data_type="export", dataset="E", product_level=3, sitc_revision=2, dataset_object=True)
	try:
	    assert_frame_equal(a.data, b.data)
	except:
	    s,d = compare_dataframe_rows(b.data, a.data.reindex_like(b.data))
	    d.to_excel("diff_D_alt.xlsx")